********************Next.js Routing********************

Routing: The skeleton of every application is routing

app router in next.js
we make all the routes in the app folders of next.js
in app folder => page.tsx is the forward slash rout "\"
in next.js-13 , there was pages router 

working of rout : 
every rout in an application can perform two functions : 
1- it may return the html made by using page.tsx
2- it may return the custom files(json,ts,pdf) by using rout.ts (also called server side API endpoint)

*********How to return custom files***********
1- simple export
2-function name must be GET
3- return NextResponse.(.json, .ts , .word etc.....)


A file is created in app folder => app/contact/rout.ts 
code : 

import { NextResponse } from "next/server"
export const GET = ()=> {
    return NextResponse.json({message:"hello world,"}) //it will return json file
}


// when we are using both page.tsx and rout.ts in one rout(folder) , the priority is rout.ts

we must use page.tsx or rout.js or rout.ts in order to make rout 


*************************LAYOUT.TSX****************************

*************Writing common code/Avoid code duplication*************

When we want to apply same style in the all the pages of my website then we have to write 
that code in layout.tsx file

we can also make the layout.tsx in the sub-tress of the /app
=> app/contact/layout.tsx

export default function ServicesLayout({children}) {
    return (
        <div>
            <h2 className="text-3xl text-red-700 font-bold">Company-services</h2>
            {children}
        </div>
    )
}

****************Dynamic-Routs*****************

make a folder with [] => /app/blog/[slug]/page.tsx


const blogData = [
    {
        id:1,
        slug = "blog-1",
        description = "Top software companies"
    },
    {
        id:2,
        slug = "blog-2",
        description = "Top software Houses"
    },
    {
        id:3,
        slug = "blog-3",
        description = "Top software projects"
    }
]


export default function Multi-blogs({params}: {params:{slug:string}}){
    const blog = blogData.filter((item=>{
        item.slug == params.slug
    }))
    return (
        <di>{blog[0]?.description}</div>
        )
}



